//
//  QRCodeReader.swift
//  QNO
//
//  Created by Randolph on 12/1/2016.
//  Copyright © 2016年 September. All rights reserved.
//

import UIKit
import AVFoundation
import PKHUD
import SwiftyUserDefaults

let customerQueueKey = DefaultsKey<[String]>("customer_queues")

class QRCodeReaderViewController: UIViewController, AVCaptureMetadataOutputObjectsDelegate {

    @IBOutlet weak var QRCodeLabel: UILabel!
    @IBOutlet weak var QRCodeState: UILabel!
    
    var objCaptureSession:AVCaptureSession?
    var objCaptureVideoPreviewLayer:AVCaptureVideoPreviewLayer?
    var vwQRCode:UIView?
    
    var terminated = false
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.configureVideoCapture()
        self.addVideoPreviewLayer()
        self.initializeQRView()
        // Do any additional setup after loading the view, typically from a nib.
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    func configureVideoCapture() {
        let objCaptureDevice = AVCaptureDevice.defaultDeviceWithMediaType(AVMediaTypeVideo)
        var error:NSError?
        let objCaptureDeviceInput: AnyObject!
        do {
            objCaptureDeviceInput = try AVCaptureDeviceInput(device: objCaptureDevice) as AVCaptureDeviceInput
            
        } catch let error1 as NSError {
            error = error1
            objCaptureDeviceInput = nil
        }
        if (error != nil) {
            let alertView:UIAlertView = UIAlertView(title: "Device Error", message:"Device not Supported for this Application", delegate: nil, cancelButtonTitle: "Ok Done")
            alertView.show()
            return
        }
        objCaptureSession = AVCaptureSession()
        objCaptureSession?.addInput(objCaptureDeviceInput as! AVCaptureInput)
        let objCaptureMetadataOutput = AVCaptureMetadataOutput()
        objCaptureSession?.addOutput(objCaptureMetadataOutput)
        objCaptureMetadataOutput.setMetadataObjectsDelegate(self, queue: dispatch_get_main_queue())
        objCaptureMetadataOutput.metadataObjectTypes = [AVMetadataObjectTypeQRCode]
    }
    
    func addVideoPreviewLayer() {
        objCaptureVideoPreviewLayer = AVCaptureVideoPreviewLayer(session: objCaptureSession)
        objCaptureVideoPreviewLayer?.videoGravity = AVLayerVideoGravityResizeAspectFill
        objCaptureVideoPreviewLayer?.frame = view.layer.bounds
        self.view.layer.addSublayer(objCaptureVideoPreviewLayer!)
        objCaptureSession?.startRunning()
        self.view.bringSubviewToFront(QRCodeLabel)
        self.view.bringSubviewToFront(QRCodeState)
    }
    
    func initializeQRView() {
        vwQRCode = UIView()
        vwQRCode?.layer.borderColor = UIColor.redColor().CGColor
        vwQRCode?.layer.borderWidth = 5
        self.view.addSubview(vwQRCode!)
        self.view.bringSubviewToFront(vwQRCode!)
    }
    
    func captureOutput(captureOutput: AVCaptureOutput!, didOutputMetadataObjects metadataObjects: [AnyObject]!, fromConnection connection: AVCaptureConnection!) {
        if terminated {
            return
        }
        
        if metadataObjects == nil || metadataObjects.count == 0 {
            vwQRCode?.frame = CGRectZero
            QRCodeState.text = "NO QRCode text detacted"
            return
        }
        let objMetadataMachineReadableCodeObject = metadataObjects[0] as! AVMetadataMachineReadableCodeObject
        if objMetadataMachineReadableCodeObject.type == AVMetadataObjectTypeQRCode {
            let objBarCode = objCaptureVideoPreviewLayer?.transformedMetadataObjectForMetadataObject(objMetadataMachineReadableCodeObject as AVMetadataMachineReadableCodeObject) as! AVMetadataMachineReadableCodeObject
            vwQRCode?.frame = objBarCode.bounds;
            if let result = objMetadataMachineReadableCodeObject.stringValue {
                QRCodeState.text = result
                // deal with the text
                var error: String?
                if !result.hasPrefix("qno://") {
                    error = "This is not a QR code generated by QNO"
                } else {
                    let urlEncoded = result.substringFromIndex(result.startIndex.advancedBy(6))
                    let parameters = urlEncoded.componentsSeparatedByString("&")
                    var houseName: String?
                    var queueName: String?
                    var ticketNumber: Int?
                    for parameter in parameters {
                        let tokens = parameter.componentsSeparatedByString("=")
                        if tokens.count != 2 {
                            error = "Format error"
                            break
                        } else {
                            switch (tokens[0]) {
                            case "name":
                                houseName = tokens[1]
                                break
                            case "queue":
                                queueName = tokens[1]
                                break
                            case "ticket":
                                ticketNumber = Int(tokens[1])
                            default:
                                break
                            }
                        }
                    }
                    if error == nil && houseName == nil || queueName == nil || ticketNumber == nil {
                        error = "Incomplete Code"
                    } else {
                        // save!
                        Defaults[customerQueueKey].append("\(houseName!)&\(queueName!)&\(ticketNumber!)")
                        terminated = true
                        NSOperationQueue.mainQueue().addOperationWithBlock({ () -> Void in
                            self.dismissViewControllerAnimated(true, completion: { () -> Void in
                                NSOperationQueue.mainQueue().addOperationWithBlock({ () -> Void in
                                    PKHUD.sharedHUD.contentView = PKHUDSuccessView()
                                    PKHUD.sharedHUD.show()
                                    PKHUD.sharedHUD.hide(afterDelay: 1.0)
                                })
                            })
                        })
                        return
                    }
                }
                NSOperationQueue.mainQueue().addOperationWithBlock({ () -> Void in
                    if error != nil {
                        PKHUD.sharedHUD.contentView = PKHUDTextView(text: error)
                        PKHUD.sharedHUD.show()
                        PKHUD.sharedHUD.hide(afterDelay: 1.0)
                    }
                })
            }
        }
    }

}
